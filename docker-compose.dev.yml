# Docker Compose configuration for development environment
version: '3.8'

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # ===========================
  # Database Services
  # ===========================
  postgres:
    image: postgres:16-alpine
    container_name: trading-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_platform}
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trading_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: trading-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================
  # Application Services (Development)
  # ===========================
  engine:
    build:
      context: ./app/engine
      dockerfile: Dockerfile.dev
      target: development
    container_name: trading-engine-dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trading_user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_platform}
      - REDIS_URL=redis://redis:6379/0
      - ENGINE_PORT=${ENGINE_PORT:-8000}
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=debug
    ports:
      - "${ENGINE_PORT:-8000}:8000"
    volumes:
      - ./app/engine:/app
      - /app/.venv  # Exclude virtual environment from volume mount
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

  router:
    build:
      context: ./app/router
      dockerfile: Dockerfile.dev
      target: development
    container_name: trading-router-dev
    restart: unless-stopped
    environment:
      - PORT=${ROUTER_PORT:-8080}
      - ENGINE_URL=http://engine:8000
      - REDIS_URL=redis://redis:6379/0
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BINANCE_FUTURES_API_KEY=${BINANCE_FUTURES_API_KEY}
      - BINANCE_FUTURES_API_SECRET=${BINANCE_FUTURES_API_SECRET}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=debug
    ports:
      - "${ROUTER_PORT:-8080}:8080"
    volumes:
      - ./app/router:/app
    depends_on:
      - engine
      - redis
    networks:
      - trading-network
    command: air # Hot reload for Go

  bff:
    build:
      context: ./app/bff
      dockerfile: Dockerfile.dev
    container_name: trading-bff-dev
    restart: unless-stopped
    environment:
      - PORT=${BFF_PORT:-3000}
      - NODE_ENV=development
      - ENGINE_PUBSUB_URL=redis://redis:6379
      - ROUTER_BASE_URL=http://router:8080
      - ROUTER_API_KEY=${ROUTER_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "${BFF_PORT:-3000}:3000"
    volumes:
      - ./app/bff:/app
      - /app/node_modules  # Exclude node_modules from volume mount
    depends_on:
      - engine
      - router
      - postgres
      - redis
    networks:
      - trading-network
    command: pnpm run start:dev

  ui:
    build:
      context: ./app/ui
      dockerfile: Dockerfile.dev
      target: development
    container_name: trading-ui-dev
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${BFF_PORT:-3000}/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:${BFF_PORT:-3000}
      - NODE_ENV=development
      - FAST_REFRESH=true
    ports:
      - "${UI_PORT:-3001}:3001"
    volumes:
      - ./app/ui:/app
      - /app/node_modules  # Exclude node_modules from volume mount
      - /app/.next  # Exclude .next from volume mount
    depends_on:
      - bff
    networks:
      - trading-network
    command: pnpm run dev

  # ===========================
  # Development Tools
  # ===========================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: trading-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - trading-network

  # Database management UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trading-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tradingplatform.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - ./infra/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - trading-network
    depends_on:
      - postgres

  # Redis management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trading-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - trading-network
    depends_on:
      - redis