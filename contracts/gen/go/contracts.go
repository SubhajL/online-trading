package contracts

// Code generated by codegen_contracts.py. DO NOT EDIT.

import (
    "time"
)


// CandlesV1 - OHLCV candle data from exchange
type CandlesV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Candle open time in ISO8601 format
	OpenTime string `json:"open_time"`
	// Candle close time in ISO8601 format
	CloseTime string `json:"close_time"`
	// Opening price
	Open string `json:"open"`
	// Highest price
	High string `json:"high"`
	// Lowest price
	Low string `json:"low"`
	// Closing price
	Close string `json:"close"`
	// Base asset volume
	Volume string `json:"volume"`
	// Quote asset volume
	QuoteVolume string `json:"quote_volume"`
	// Number of trades
	Trades int64 `json:"trades"`
	// Taker buy base asset volume
	TakerBuyVolume string `json:"taker_buy_volume"`
	// Taker buy quote asset volume
	TakerBuyQuoteVolume string `json:"taker_buy_quote_volume"`
	// Whether the candle is closed
	IsClosed bool `json:"is_closed"`
}

// DecisionV1 - Final trading decision with position sizing
type DecisionV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Unique identifier for the decision
	DecisionId string `json:"decision_id"`
	// Time when the decision was made
	DecisionTime string `json:"decision_time"`
	// Trading action to take
	Action string `json:"action"`
	// IDs of signals that contributed to this decision
	SignalIds []string `json:"signal_ids"`
	// Entry price for new positions
	EntryPrice *string `json:"entry_price"`
	// Stop loss price
	StopLoss *string `json:"stop_loss"`
	// Take profit price
	TakeProfit *string `json:"take_profit"`
	// Position size in base currency
	PositionSize *string `json:"position_size"`
	// Risk amount in quote currency
	RiskAmount *string `json:"risk_amount"`
	// Risk as percentage of capital (0-1)
	RiskPercentage *float64 `json:"risk_percentage"`
	// Leverage to use (1 for spot)
	Leverage *string `json:"leverage"`
	// Decision confidence score (0-1)
	Confidence float64 `json:"confidence"`
	// Human-readable reason for the decision
	Reason string `json:"reason"`
}

// FeaturesV1 - Technical indicators calculated from candle data
type FeaturesV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Candle open time in ISO8601 format
	OpenTime string `json:"open_time"`
	// Candle close time in ISO8601 format
	CloseTime string `json:"close_time"`
	// Short-term exponential moving average
	EmaShort *float64 `json:"ema_short"`
	// Long-term exponential moving average
	EmaLong *float64 `json:"ema_long"`
	// Relative Strength Index (0-100)
	Rsi *float64 `json:"rsi"`
	// MACD line value
	Macd *float64 `json:"macd"`
	// MACD signal line value
	MacdSignal *float64 `json:"macd_signal"`
	// MACD histogram value
	MacdHistogram *float64 `json:"macd_histogram"`
	// Average True Range
	Atr *string `json:"atr"`
	// Bollinger Band upper band
	BbUpper *float64 `json:"bb_upper"`
	// Bollinger Band middle band (SMA)
	BbMiddle *float64 `json:"bb_middle"`
	// Bollinger Band lower band
	BbLower *float64 `json:"bb_lower"`
	// Volume moving average
	VolumeMa *float64 `json:"volume_ma"`
}

// FundingWindowV1 - Risk window for funding rate events
type FundingWindowV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Time of the funding rate event
	FundingTime string `json:"funding_time"`
	// Current funding rate percentage
	CurrentRate float64 `json:"current_rate"`
	// Predicted next funding rate percentage
	PredictedRate *float64 `json:"predicted_rate"`
	// Start of the risk window (typically 30min before funding)
	WindowStart string `json:"window_start"`
	// End of the risk window (typically 15min after funding)
	WindowEnd string `json:"window_end"`
	// Whether the risk window is currently active
	IsActive bool `json:"is_active"`
	// Risk level based on funding rate magnitude
	RiskLevel string `json:"risk_level"`
}

// NewsWindowV1 - Risk window for news events
type NewsWindowV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Unique identifier for the news event
	EventId string `json:"event_id"`
	// Name of the news event
	EventName string `json:"event_name"`
	// Expected market impact level
	Impact string `json:"impact"`
	// Start of the risk window
	WindowStart string `json:"window_start"`
	// End of the risk window
	WindowEnd string `json:"window_end"`
	// Whether the risk window is currently active
	IsActive bool `json:"is_active"`
}

// OrderUpdateV1 - Order status updates from the router
type OrderUpdateV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Exchange order ID
	OrderId string `json:"order_id"`
	// Our unique order identifier
	ClientOrderId string `json:"client_order_id"`
	// ID of the decision that triggered this order
	DecisionId string `json:"decision_id"`
	// Time of the status update
	UpdateTime string `json:"update_time"`
	// Current order status
	Status string `json:"status"`
	// Order side
	Side string `json:"side"`
	// Order type
	OrderType string `json:"order_type"`
	// Order price (null for market orders)
	Price *string `json:"price"`
	// Stop price (for stop orders)
	StopPrice *string `json:"stop_price"`
	// Order quantity
	Quantity string `json:"quantity"`
	// Filled quantity
	FilledQuantity string `json:"filled_quantity"`
	// Average fill price
	AverageFillPrice *string `json:"average_fill_price"`
	// Commission paid
	Commission *float64 `json:"commission"`
	// Commission asset
	CommissionAsset *string `json:"commission_asset"`
	// Error message if order failed
	ErrorMessage *string `json:"error_message"`
	// Whether this is a reduce-only order (futures)
	IsReduceOnly bool `json:"is_reduce_only"`
}

// RegimeV1 - Market regime classification (trending, ranging, volatile)
type RegimeV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Time when the regime analysis was performed
	AnalysisTime string `json:"analysis_time"`
	// Current market regime classification
	RegimeType string `json:"regime_type"`
	// Regime strength/confidence (0-1)
	Strength float64 `json:"strength"`
	// Current volatility level
	Volatility float64 `json:"volatility"`
	// Trend direction score (-1 to 1, null if ranging)
	TrendDirection *float64 `json:"trend_direction"`
	// Number of periods analyzed
	LookbackPeriods int64 `json:"lookback_periods"`
}

// SignalsRawV1 - Candidate trading signals with entry, stop loss, and take profit hints
type SignalsRawV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Unique identifier for the signal
	SignalId string `json:"signal_id"`
	// Time when the signal was generated
	SignalTime string `json:"signal_time"`
	// Direction of the signal
	SignalType string `json:"signal_type"`
	// Source strategy that generated the signal
	Source string `json:"source"`
	// Suggested entry price
	EntryPrice string `json:"entry_price"`
	// Suggested stop loss price
	StopLoss string `json:"stop_loss"`
	// First take profit target
	TakeProfit1 *string `json:"take_profit_1"`
	// Second take profit target
	TakeProfit2 *string `json:"take_profit_2"`
	// Third take profit target
	TakeProfit3 *string `json:"take_profit_3"`
	// Signal confidence score (0-1)
	Confidence float64 `json:"confidence"`
	// Additional signal metadata
	Metadata map[string]interface{} `json:"metadata"`
}

// SmcEventsV1 - Smart Money Concepts events - Change of Character (CHOCH) and Break of Structure (BOS)
type SmcEventsV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Time when the event occurred
	EventTime string `json:"event_time"`
	// Type of SMC event
	EventType string `json:"event_type"`
	// Direction of the structure break
	Direction string `json:"direction"`
	// Price at which the event occurred
	PriceLevel string `json:"price_level"`
	// Price of the previous pivot point
	PreviousPivotPrice string `json:"previous_pivot_price"`
	// Time of the previous pivot point
	PreviousPivotTime string `json:"previous_pivot_time"`
	// Price of the broken pivot point
	BrokenPivotPrice string `json:"broken_pivot_price"`
	// Time of the broken pivot point
	BrokenPivotTime string `json:"broken_pivot_time"`
}

// ZonesV1 - Supply/demand zones including order blocks and fair value gaps
type ZonesV1 struct {
	// Schema version in semver format
	Version string `json:"version"`
	// Exchange/venue name
	Venue string `json:"venue"`
	// Trading pair symbol
	Symbol string `json:"symbol"`
	// Candle timeframe
	Timeframe string `json:"timeframe"`
	// Unique identifier for the zone
	ZoneId string `json:"zone_id"`
	// Type of SMC zone
	ZoneType string `json:"zone_type"`
	// Zone direction - demand (bullish) or supply (bearish)
	Direction string `json:"direction"`
	// Upper price boundary of the zone
	UpperBound string `json:"upper_bound"`
	// Lower price boundary of the zone
	LowerBound string `json:"lower_bound"`
	// Time when the zone was created
	CreatedTime string `json:"created_time"`
	// Number of candles forming the zone
	CandleCount int64 `json:"candle_count"`
	// Zone strength score (0-1)
	Strength float64 `json:"strength"`
	// Number of times price has retested the zone
	Touches int64 `json:"touches"`
	// Whether the zone is still active
	IsActive bool `json:"is_active"`
}