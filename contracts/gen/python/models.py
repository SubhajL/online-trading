# Code generated by codegen_contracts.py. DO NOT EDIT.

from datetime import datetime
from typing import Dict, List, Literal, Optional, Any
from pydantic import BaseModel, Field, validator


class CandlesV1(BaseModel):
    """OHLCV candle data from exchange"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    open_time: str = Field(description="Candle open time in ISO8601 format")
    close_time: str = Field(description="Candle close time in ISO8601 format")
    open: str = Field(description="Opening price")
    high: str = Field(description="Highest price")
    low: str = Field(description="Lowest price")
    close: str = Field(description="Closing price")
    volume: str = Field(description="Base asset volume")
    quote_volume: str = Field(description="Quote asset volume")
    trades: int = Field(description="Number of trades")
    taker_buy_volume: str = Field(description="Taker buy base asset volume")
    taker_buy_quote_volume: str = Field(description="Taker buy quote asset volume")
    is_closed: bool = Field(description="Whether the candle is closed")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class DecisionV1(BaseModel):
    """Final trading decision with position sizing"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    decision_id: str = Field(description="Unique identifier for the decision")
    decision_time: str = Field(description="Time when the decision was made")
    action: Literal["open_long", "open_short", "close_position", "no_action"] = Field(
        description="Trading action to take"
    )
    signal_ids: List[str] = Field(
        description="IDs of signals that contributed to this decision"
    )
    entry_price: str | None = Field(description="Entry price for new positions")
    stop_loss: str | None = Field(description="Stop loss price")
    take_profit: str | None = Field(description="Take profit price")
    position_size: str | None = Field(description="Position size in base currency")
    risk_amount: str | None = Field(description="Risk amount in quote currency")
    risk_percentage: float | None = Field(
        description="Risk as percentage of capital (0-1)"
    )
    leverage: str | None = Field(description="Leverage to use (1 for spot)")
    confidence: float = Field(description="Decision confidence score (0-1)")
    reason: str = Field(description="Human-readable reason for the decision")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class FeaturesV1(BaseModel):
    """Technical indicators calculated from candle data"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    open_time: str = Field(description="Candle open time in ISO8601 format")
    close_time: str = Field(description="Candle close time in ISO8601 format")
    ema_short: float | None = Field(description="Short-term exponential moving average")
    ema_long: float | None = Field(description="Long-term exponential moving average")
    rsi: float | None = Field(description="Relative Strength Index (0-100)")
    macd: float | None = Field(description="MACD line value")
    macd_signal: float | None = Field(description="MACD signal line value")
    macd_histogram: float | None = Field(description="MACD histogram value")
    atr: str | None = Field(description="Average True Range")
    bb_upper: float | None = Field(description="Bollinger Band upper band")
    bb_middle: float | None = Field(description="Bollinger Band middle band (SMA)")
    bb_lower: float | None = Field(description="Bollinger Band lower band")
    volume_ma: float | None = Field(description="Volume moving average")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class FundingWindowV1(BaseModel):
    """Risk window for funding rate events"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    funding_time: str = Field(description="Time of the funding rate event")
    current_rate: float = Field(description="Current funding rate percentage")
    predicted_rate: float | None = Field(
        description="Predicted next funding rate percentage"
    )
    window_start: str = Field(
        description="Start of the risk window (typically 30min before funding)"
    )
    window_end: str = Field(
        description="End of the risk window (typically 15min after funding)"
    )
    is_active: bool = Field(description="Whether the risk window is currently active")
    risk_level: Literal["low", "medium", "high"] = Field(
        description="Risk level based on funding rate magnitude"
    )

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class NewsWindowV1(BaseModel):
    """Risk window for news events"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    event_id: str = Field(description="Unique identifier for the news event")
    event_name: str = Field(description="Name of the news event")
    impact: Literal["low", "medium", "high"] = Field(
        description="Expected market impact level"
    )
    window_start: str = Field(description="Start of the risk window")
    window_end: str = Field(description="End of the risk window")
    is_active: bool = Field(description="Whether the risk window is currently active")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class OrderUpdateV1(BaseModel):
    """Order status updates from the router"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    order_id: str = Field(description="Exchange order ID")
    client_order_id: str = Field(description="Our unique order identifier")
    decision_id: str = Field(description="ID of the decision that triggered this order")
    update_time: str = Field(description="Time of the status update")
    status: Literal[
        "pending",
        "new",
        "partially_filled",
        "filled",
        "cancelled",
        "rejected",
        "expired",
    ] = Field(description="Current order status")
    side: Literal["buy", "sell"] = Field(description="Order side")
    order_type: Literal["market", "limit", "stop_market", "stop_limit"] = Field(
        description="Order type"
    )
    price: str | None = Field(description="Order price (null for market orders)")
    stop_price: str | None = Field(description="Stop price (for stop orders)")
    quantity: str = Field(description="Order quantity")
    filled_quantity: str = Field(description="Filled quantity")
    average_fill_price: str | None = Field(description="Average fill price")
    commission: float | None = Field(description="Commission paid")
    commission_asset: str | None = Field(description="Commission asset")
    error_message: str | None = Field(description="Error message if order failed")
    is_reduce_only: bool = Field(
        description="Whether this is a reduce-only order (futures)"
    )

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class RegimeV1(BaseModel):
    """Market regime classification (trending, ranging, volatile)"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    analysis_time: str = Field(
        description="Time when the regime analysis was performed"
    )
    regime_type: Literal["trending_up", "trending_down", "ranging", "volatile"] = Field(
        description="Current market regime classification"
    )
    strength: float = Field(description="Regime strength/confidence (0-1)")
    volatility: float = Field(description="Current volatility level")
    trend_direction: float | None = Field(
        description="Trend direction score (-1 to 1, null if ranging)"
    )
    lookback_periods: int = Field(description="Number of periods analyzed")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class SignalsRawV1(BaseModel):
    """Candidate trading signals with entry, stop loss, and take profit hints"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    signal_id: str = Field(description="Unique identifier for the signal")
    signal_time: str = Field(description="Time when the signal was generated")
    signal_type: Literal["long", "short"] = Field(description="Direction of the signal")
    source: str = Field(description="Source strategy that generated the signal")
    entry_price: str = Field(description="Suggested entry price")
    stop_loss: str = Field(description="Suggested stop loss price")
    take_profit_1: str | None = Field(description="First take profit target")
    take_profit_2: str | None = Field(description="Second take profit target")
    take_profit_3: str | None = Field(description="Third take profit target")
    confidence: float = Field(description="Signal confidence score (0-1)")
    metadata: Dict[str, Any] = Field(description="Additional signal metadata")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class SmcEventsV1(BaseModel):
    """Smart Money Concepts events - Change of Character (CHOCH) and Break of Structure (BOS)"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    event_time: str = Field(description="Time when the event occurred")
    event_type: Literal["choch", "bos"] = Field(description="Type of SMC event")
    direction: Literal["bullish", "bearish"] = Field(
        description="Direction of the structure break"
    )
    price_level: str = Field(description="Price at which the event occurred")
    previous_pivot_price: str = Field(description="Price of the previous pivot point")
    previous_pivot_time: str = Field(description="Time of the previous pivot point")
    broken_pivot_price: str = Field(description="Price of the broken pivot point")
    broken_pivot_time: str = Field(description="Time of the broken pivot point")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class ZonesV1(BaseModel):
    """Supply/demand zones including order blocks and fair value gaps"""

    version: str = Field(description="Schema version in semver format")
    venue: str = Field(description="Exchange/venue name")
    symbol: str = Field(description="Trading pair symbol")
    timeframe: str = Field(description="Candle timeframe")
    zone_id: str = Field(description="Unique identifier for the zone")
    zone_type: Literal["order_block", "fair_value_gap"] = Field(
        description="Type of SMC zone"
    )
    direction: Literal["demand", "supply"] = Field(
        description="Zone direction - demand (bullish) or supply (bearish)"
    )
    upper_bound: str = Field(description="Upper price boundary of the zone")
    lower_bound: str = Field(description="Lower price boundary of the zone")
    created_time: str = Field(description="Time when the zone was created")
    candle_count: int = Field(description="Number of candles forming the zone")
    strength: float = Field(description="Zone strength score (0-1)")
    touches: int = Field(description="Number of times price has retested the zone")
    is_active: bool = Field(description="Whether the zone is still active")

    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false
