# Docker Compose configuration for Online Trading Platform
version: '3.8'

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

services:
  # ===========================
  # Database Services
  # ===========================
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: trading-postgres
    restart: unless-stopped
    shm_size: 256mb
    command:
      - postgres
      - -c
      - shared_preload_libraries=timescaledb
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
      - -c
      - work_mem=4MB
      - -c
      - min_wal_size=1GB
      - -c
      - max_wal_size=4GB
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_platform}
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trading_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # Application Services
  # ===========================
  engine:
    build:
      context: ./app/engine
      dockerfile: Dockerfile
    container_name: trading-engine
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trading_user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_platform}
      - REDIS_URL=redis://redis:6379/0
      - ENGINE_PORT=${ENGINE_PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${ENGINE_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  router:
    build:
      context: ./app/router
      dockerfile: Dockerfile
    container_name: trading-router
    restart: unless-stopped
    environment:
      - ROUTER_PORT=${ROUTER_PORT:-8001}
      - ENGINE_URL=http://engine:8000
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${ROUTER_PORT:-8001}:8001"
    depends_on:
      - engine
      - redis
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  bff:
    build:
      context: ./app/bff
      dockerfile: Dockerfile
    container_name: trading-bff
    restart: unless-stopped
    environment:
      - BFF_PORT=${BFF_PORT:-8002}
      - ENGINE_URL=http://engine:8000
      - ROUTER_URL=http://router:8001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trading_user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_platform}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_minimum_32_characters}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${BFF_PORT:-8002}:8002"
    depends_on:
      - engine
      - router
      - postgres
      - redis
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ui:
    build:
      context: ./app/ui
      dockerfile: Dockerfile
    container_name: trading-ui
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_BFF_URL=http://localhost:${BFF_PORT:-8002}
      - NEXT_PUBLIC_WS_URL=ws://localhost:${WS_PORT:-8080}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${UI_PORT:-3000}:3000"
    depends_on:
      - bff
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # Monitoring Services
  # ===========================
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network
    depends_on:
      - engine
      - router
      - bff

  grafana:
    image: grafana/grafana-oss:latest
    container_name: trading-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trading-network
    depends_on:
      - prometheus

  # ===========================
  # Message Queue (Optional)
  # ===========================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: trading-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-password}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./infra/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================
  # Load Balancer (Optional)
  # ===========================
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
    networks:
      - trading-network
    depends_on:
      - ui
      - bff